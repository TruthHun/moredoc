// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/punishment.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 这里是proto文件中的结构体，可以根据需要删除或者调整
type Punishment struct {
	StartTime *time.Time `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	EndTime   *time.Time `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	Id        int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type      int32      `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Enable    bool       `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	Operators string     `protobuf:"bytes,5,opt,name=operators,proto3" json:"operators,omitempty"`
	Remark    string     `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	Reason    string     `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
	Username  string     `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *Punishment) Reset()         { *m = Punishment{} }
func (m *Punishment) String() string { return proto.CompactTextString(m) }
func (*Punishment) ProtoMessage()    {}
func (*Punishment) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{0}
}
func (m *Punishment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Punishment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Punishment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Punishment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Punishment.Merge(m, src)
}
func (m *Punishment) XXX_Size() int {
	return m.Size()
}
func (m *Punishment) XXX_DiscardUnknown() {
	xxx_messageInfo_Punishment.DiscardUnknown(m)
}

var xxx_messageInfo_Punishment proto.InternalMessageInfo

func (m *Punishment) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Punishment) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Punishment) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Punishment) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Punishment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Punishment) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Punishment) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Punishment) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Punishment) GetOperators() string {
	if m != nil {
		return m.Operators
	}
	return ""
}

func (m *Punishment) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Punishment) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Punishment) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type CancelPunishmentRequest struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *CancelPunishmentRequest) Reset()         { *m = CancelPunishmentRequest{} }
func (m *CancelPunishmentRequest) String() string { return proto.CompactTextString(m) }
func (*CancelPunishmentRequest) ProtoMessage()    {}
func (*CancelPunishmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{1}
}
func (m *CancelPunishmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelPunishmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelPunishmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelPunishmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelPunishmentRequest.Merge(m, src)
}
func (m *CancelPunishmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelPunishmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelPunishmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelPunishmentRequest proto.InternalMessageInfo

func (m *CancelPunishmentRequest) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetPunishmentRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPunishmentRequest) Reset()         { *m = GetPunishmentRequest{} }
func (m *GetPunishmentRequest) String() string { return proto.CompactTextString(m) }
func (*GetPunishmentRequest) ProtoMessage()    {}
func (*GetPunishmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{2}
}
func (m *GetPunishmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPunishmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPunishmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPunishmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPunishmentRequest.Merge(m, src)
}
func (m *GetPunishmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPunishmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPunishmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPunishmentRequest proto.InternalMessageInfo

func (m *GetPunishmentRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListPunishmentRequest struct {
	Page   int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size_  int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Wd     string   `protobuf:"bytes,3,opt,name=wd,proto3" json:"wd,omitempty"`
	Field  []string `protobuf:"bytes,4,rep,name=field,proto3" json:"field,omitempty"`
	Order  string   `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	Type   []int32  `protobuf:"varint,6,rep,packed,name=type,proto3" json:"type,omitempty"`
	Enable []int32  `protobuf:"varint,7,rep,packed,name=enable,proto3" json:"enable,omitempty"`
	UserId []int64  `protobuf:"varint,8,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *ListPunishmentRequest) Reset()         { *m = ListPunishmentRequest{} }
func (m *ListPunishmentRequest) String() string { return proto.CompactTextString(m) }
func (*ListPunishmentRequest) ProtoMessage()    {}
func (*ListPunishmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{3}
}
func (m *ListPunishmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPunishmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPunishmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPunishmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPunishmentRequest.Merge(m, src)
}
func (m *ListPunishmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPunishmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPunishmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPunishmentRequest proto.InternalMessageInfo

func (m *ListPunishmentRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPunishmentRequest) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ListPunishmentRequest) GetWd() string {
	if m != nil {
		return m.Wd
	}
	return ""
}

func (m *ListPunishmentRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *ListPunishmentRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListPunishmentRequest) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ListPunishmentRequest) GetEnable() []int32 {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *ListPunishmentRequest) GetUserId() []int64 {
	if m != nil {
		return m.UserId
	}
	return nil
}

type CreatePunishmentRequest struct {
	StartTime *time.Time `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
	EndTime   *time.Time `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time,omitempty"`
	Id        int64      `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	UserId    []int64    `protobuf:"varint,4,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type      []int32    `protobuf:"varint,5,rep,packed,name=type,proto3" json:"type,omitempty"`
	Enable    bool       `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
	Remark    string     `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	Reason    string     `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *CreatePunishmentRequest) Reset()         { *m = CreatePunishmentRequest{} }
func (m *CreatePunishmentRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePunishmentRequest) ProtoMessage()    {}
func (*CreatePunishmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{4}
}
func (m *CreatePunishmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePunishmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePunishmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePunishmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePunishmentRequest.Merge(m, src)
}
func (m *CreatePunishmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePunishmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePunishmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePunishmentRequest proto.InternalMessageInfo

func (m *CreatePunishmentRequest) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *CreatePunishmentRequest) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *CreatePunishmentRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreatePunishmentRequest) GetUserId() []int64 {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *CreatePunishmentRequest) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CreatePunishmentRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *CreatePunishmentRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *CreatePunishmentRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ListPunishmentReply struct {
	Total      int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Punishment []*Punishment `protobuf:"bytes,2,rep,name=punishment,proto3" json:"punishment,omitempty"`
}

func (m *ListPunishmentReply) Reset()         { *m = ListPunishmentReply{} }
func (m *ListPunishmentReply) String() string { return proto.CompactTextString(m) }
func (*ListPunishmentReply) ProtoMessage()    {}
func (*ListPunishmentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_165d39e292001fbd, []int{5}
}
func (m *ListPunishmentReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPunishmentReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPunishmentReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPunishmentReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPunishmentReply.Merge(m, src)
}
func (m *ListPunishmentReply) XXX_Size() int {
	return m.Size()
}
func (m *ListPunishmentReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPunishmentReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListPunishmentReply proto.InternalMessageInfo

func (m *ListPunishmentReply) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListPunishmentReply) GetPunishment() []*Punishment {
	if m != nil {
		return m.Punishment
	}
	return nil
}

func init() {
	proto.RegisterType((*Punishment)(nil), "api.v1.Punishment")
	proto.RegisterType((*CancelPunishmentRequest)(nil), "api.v1.CancelPunishmentRequest")
	proto.RegisterType((*GetPunishmentRequest)(nil), "api.v1.GetPunishmentRequest")
	proto.RegisterType((*ListPunishmentRequest)(nil), "api.v1.ListPunishmentRequest")
	proto.RegisterType((*CreatePunishmentRequest)(nil), "api.v1.CreatePunishmentRequest")
	proto.RegisterType((*ListPunishmentReply)(nil), "api.v1.ListPunishmentReply")
}

func init() { proto.RegisterFile("api/v1/punishment.proto", fileDescriptor_165d39e292001fbd) }

var fileDescriptor_165d39e292001fbd = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xda, 0xf9, 0x9d, 0xd2, 0xaa, 0x2c, 0xa1, 0x71, 0xdd, 0x36, 0xb1, 0x2c, 0x84, 0x42,
	0x0f, 0x89, 0x1a, 0xc4, 0xa5, 0x3d, 0x54, 0x6d, 0x85, 0x50, 0x25, 0x0e, 0x95, 0x05, 0x17, 0x24,
	0x14, 0x6d, 0xe3, 0x6d, 0x30, 0xd8, 0x5e, 0xd7, 0xde, 0xb4, 0x0a, 0x47, 0x9e, 0xa0, 0x12, 0x47,
	0x78, 0x18, 0x8e, 0x48, 0x5c, 0x2a, 0x71, 0xe1, 0x06, 0x6a, 0x79, 0x10, 0xe4, 0xf5, 0x3a, 0xbf,
	0x8e, 0x28, 0xe2, 0xb6, 0x33, 0xb3, 0xf3, 0x7d, 0x3b, 0xdf, 0x8c, 0xc7, 0x50, 0x25, 0x81, 0xd3,
	0x3a, 0xdf, 0x6e, 0x05, 0x7d, 0xdf, 0x89, 0xde, 0x78, 0xd4, 0xe7, 0xcd, 0x20, 0x64, 0x9c, 0xe1,
	0x02, 0x09, 0x9c, 0xe6, 0xf9, 0xb6, 0x5e, 0xef, 0x31, 0xd6, 0x73, 0x69, 0x4b, 0x78, 0x4f, 0xfa,
	0xa7, 0x2d, 0xee, 0x78, 0x34, 0xe2, 0xc4, 0x0b, 0x92, 0x8b, 0x7a, 0xa5, 0xc7, 0x7a, 0x4c, 0x1c,
	0x5b, 0xf1, 0x49, 0x7a, 0x37, 0x64, 0x5a, 0x0c, 0x4f, 0x7c, 0x9f, 0x71, 0xc2, 0x1d, 0xe6, 0x47,
	0x32, 0xba, 0x3e, 0x0d, 0x4a, 0xbd, 0x80, 0x0f, 0x92, 0xa0, 0xf9, 0x4d, 0x05, 0x38, 0x1e, 0x3e,
	0x07, 0xef, 0x01, 0x44, 0x9c, 0x84, 0xbc, 0x13, 0x13, 0x6b, 0x05, 0x03, 0x35, 0x16, 0xdb, 0x7a,
	0x33, 0x01, 0x68, 0xa6, 0x00, 0xcd, 0x17, 0xe9, 0xab, 0x0e, 0x72, 0x97, 0x3f, 0xeb, 0xc8, 0x2a,
	0x8b, 0x9c, 0xd8, 0x8b, 0x77, 0xa1, 0x44, 0x7d, 0x3b, 0x49, 0x2f, 0xde, 0x32, 0xbd, 0x48, 0x7d,
	0x5b, 0x24, 0xef, 0x01, 0x74, 0x43, 0x4a, 0x38, 0xb5, 0x3b, 0x84, 0x6b, 0xa5, 0xdb, 0xb2, 0xcb,
	0x9c, 0x7d, 0xf1, 0xfc, 0x7e, 0x60, 0xa7, 0x00, 0xe5, 0xdb, 0x02, 0xc8, 0x9c, 0x7d, 0x8e, 0x97,
	0x41, 0x71, 0x6c, 0x0d, 0x19, 0xa8, 0xa1, 0x5a, 0x8a, 0x63, 0xe3, 0x2a, 0x14, 0xfb, 0x11, 0x0d,
	0x3b, 0x8e, 0xad, 0x29, 0xc2, 0x59, 0x88, 0xcd, 0x23, 0x1b, 0x63, 0xc8, 0xf1, 0x41, 0x40, 0x35,
	0xd5, 0x40, 0x8d, 0xbc, 0x25, 0xce, 0x78, 0x15, 0x0a, 0xd4, 0x27, 0x27, 0x2e, 0xd5, 0x72, 0x06,
	0x6a, 0x94, 0x2c, 0x69, 0xe1, 0x0d, 0x28, 0xb3, 0x80, 0x86, 0x84, 0xb3, 0x30, 0xd2, 0xf2, 0x06,
	0x6a, 0x94, 0xad, 0x91, 0x23, 0xce, 0x0a, 0xa9, 0x47, 0xc2, 0x77, 0x1a, 0x88, 0x90, 0xb4, 0x12,
	0x3f, 0x89, 0x98, 0xaf, 0x2d, 0xa6, 0xfe, 0xd8, 0xc2, 0x3a, 0x94, 0xe2, 0x37, 0xf8, 0xc4, 0xa3,
	0xda, 0x1d, 0x11, 0x19, 0xda, 0xe6, 0x23, 0xa8, 0x1e, 0x12, 0xbf, 0x4b, 0xdd, 0x51, 0x4b, 0x2d,
	0x7a, 0xd6, 0xa7, 0xd1, 0xa8, 0x32, 0x35, 0xa9, 0xcc, 0x7c, 0x08, 0x95, 0x67, 0x94, 0xcf, 0xbf,
	0x27, 0x15, 0x30, 0xbf, 0x20, 0xb8, 0xff, 0xdc, 0x89, 0x32, 0x6e, 0x62, 0xc8, 0x05, 0xa4, 0x47,
	0xe5, 0x5d, 0x71, 0x8e, 0x7d, 0x91, 0xf3, 0x9e, 0x4a, 0xb1, 0xc4, 0x39, 0x46, 0xbc, 0xb0, 0x85,
	0x50, 0x65, 0x4b, 0xb9, 0xb0, 0x71, 0x05, 0xf2, 0xa7, 0x0e, 0x75, 0x6d, 0x2d, 0x67, 0xa8, 0x8d,
	0xb2, 0x95, 0x18, 0xb1, 0x97, 0x85, 0x36, 0x0d, 0xa5, 0x40, 0x89, 0x31, 0x94, 0xb9, 0x60, 0xa8,
	0x19, 0x32, 0x17, 0x85, 0x37, 0x95, 0x79, 0xac, 0x57, 0x25, 0x51, 0xa6, 0xec, 0x95, 0xf9, 0x59,
	0x81, 0xea, 0xa1, 0x98, 0x91, 0xd9, 0x22, 0x26, 0x07, 0x1e, 0xfd, 0xdf, 0xc0, 0x2b, 0xff, 0x3a,
	0xf0, 0x89, 0xd8, 0x6a, 0xd6, 0xb8, 0xe5, 0xc6, 0x4b, 0x18, 0xea, 0x90, 0xcf, 0xd4, 0xa1, 0x30,
	0x31, 0x6e, 0xa3, 0x81, 0x2a, 0xce, 0x19, 0xa8, 0xd2, 0xf8, 0x40, 0x99, 0x1d, 0xb8, 0x37, 0xdd,
	0xe0, 0xc0, 0x1d, 0xc4, 0x0d, 0xe1, 0x8c, 0x13, 0x57, 0xf6, 0x37, 0x31, 0x70, 0x1b, 0x60, 0xb4,
	0xbd, 0x34, 0xc5, 0x50, 0x1b, 0x8b, 0x6d, 0xdc, 0x4c, 0xd6, 0x57, 0x73, 0x0c, 0x62, 0xec, 0x56,
	0xfb, 0x53, 0x0e, 0x96, 0x46, 0xa1, 0xfd, 0xe3, 0x23, 0xfc, 0x16, 0x56, 0xa6, 0x1b, 0x82, 0xeb,
	0x29, 0xca, 0x9c, 0x56, 0xe9, 0xab, 0x33, 0xba, 0x3e, 0x8d, 0x17, 0x99, 0xb9, 0xf9, 0xe1, 0xfb,
	0xef, 0x8f, 0x4a, 0xd5, 0xc4, 0xad, 0x99, 0xf5, 0xba, 0x83, 0xb6, 0xf0, 0x6b, 0x58, 0x79, 0x29,
	0xbe, 0xef, 0x31, 0xae, 0x8c, 0x17, 0xff, 0x0d, 0x5e, 0x9f, 0x0b, 0xbf, 0x34, 0xf1, 0x1d, 0xe1,
	0x8d, 0x14, 0x3b, 0xeb, 0xf3, 0xd2, 0x33, 0x98, 0x4d, 0x5d, 0x30, 0x54, 0x70, 0x06, 0x03, 0xf6,
	0x60, 0x79, 0xb2, 0x39, 0x78, 0x33, 0x45, 0xc8, 0xfc, 0x2a, 0xf5, 0xf5, 0x79, 0xe1, 0xc0, 0x1d,
	0x98, 0x75, 0xc1, 0xb4, 0x86, 0xab, 0xb3, 0x4c, 0x2d, 0xd7, 0x89, 0x38, 0x3e, 0x83, 0x95, 0xe9,
	0x05, 0x32, 0xd6, 0x98, 0xec, 0xd5, 0x32, 0x57, 0xb9, 0x07, 0x82, 0xad, 0xa6, 0xaf, 0x65, 0xb0,
	0x75, 0x05, 0xd6, 0x0e, 0xda, 0x3a, 0x78, 0xf2, 0xf5, 0xba, 0x86, 0xae, 0xae, 0x6b, 0xe8, 0xd7,
	0x75, 0x0d, 0x5d, 0xde, 0xd4, 0x16, 0xae, 0x6e, 0x6a, 0x0b, 0x3f, 0x6e, 0x6a, 0x0b, 0x20, 0xff,
	0x8a, 0xc7, 0xe8, 0xd5, 0x5d, 0x8f, 0x85, 0xd4, 0x66, 0x5d, 0x09, 0xb4, 0x7b, 0xbe, 0x7d, 0x52,
	0x10, 0x64, 0x8f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x70, 0x53, 0x08, 0x46, 0x54, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PunishmentAPIClient is the client API for PunishmentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PunishmentAPIClient interface {
	CreatePunishment(ctx context.Context, in *CreatePunishmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePunishment(ctx context.Context, in *Punishment, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPunishment(ctx context.Context, in *GetPunishmentRequest, opts ...grpc.CallOption) (*Punishment, error)
	ListPunishment(ctx context.Context, in *ListPunishmentRequest, opts ...grpc.CallOption) (*ListPunishmentReply, error)
	// 批量取消惩罚
	CancelPunishment(ctx context.Context, in *CancelPunishmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type punishmentAPIClient struct {
	cc *grpc.ClientConn
}

func NewPunishmentAPIClient(cc *grpc.ClientConn) PunishmentAPIClient {
	return &punishmentAPIClient{cc}
}

func (c *punishmentAPIClient) CreatePunishment(ctx context.Context, in *CreatePunishmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.PunishmentAPI/CreatePunishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punishmentAPIClient) UpdatePunishment(ctx context.Context, in *Punishment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.PunishmentAPI/UpdatePunishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punishmentAPIClient) GetPunishment(ctx context.Context, in *GetPunishmentRequest, opts ...grpc.CallOption) (*Punishment, error) {
	out := new(Punishment)
	err := c.cc.Invoke(ctx, "/api.v1.PunishmentAPI/GetPunishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punishmentAPIClient) ListPunishment(ctx context.Context, in *ListPunishmentRequest, opts ...grpc.CallOption) (*ListPunishmentReply, error) {
	out := new(ListPunishmentReply)
	err := c.cc.Invoke(ctx, "/api.v1.PunishmentAPI/ListPunishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *punishmentAPIClient) CancelPunishment(ctx context.Context, in *CancelPunishmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.PunishmentAPI/CancelPunishment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PunishmentAPIServer is the server API for PunishmentAPI service.
type PunishmentAPIServer interface {
	CreatePunishment(context.Context, *CreatePunishmentRequest) (*emptypb.Empty, error)
	UpdatePunishment(context.Context, *Punishment) (*emptypb.Empty, error)
	GetPunishment(context.Context, *GetPunishmentRequest) (*Punishment, error)
	ListPunishment(context.Context, *ListPunishmentRequest) (*ListPunishmentReply, error)
	// 批量取消惩罚
	CancelPunishment(context.Context, *CancelPunishmentRequest) (*emptypb.Empty, error)
}

// UnimplementedPunishmentAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPunishmentAPIServer struct {
}

func (*UnimplementedPunishmentAPIServer) CreatePunishment(ctx context.Context, req *CreatePunishmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePunishment not implemented")
}
func (*UnimplementedPunishmentAPIServer) UpdatePunishment(ctx context.Context, req *Punishment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePunishment not implemented")
}
func (*UnimplementedPunishmentAPIServer) GetPunishment(ctx context.Context, req *GetPunishmentRequest) (*Punishment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPunishment not implemented")
}
func (*UnimplementedPunishmentAPIServer) ListPunishment(ctx context.Context, req *ListPunishmentRequest) (*ListPunishmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPunishment not implemented")
}
func (*UnimplementedPunishmentAPIServer) CancelPunishment(ctx context.Context, req *CancelPunishmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPunishment not implemented")
}

func RegisterPunishmentAPIServer(s *grpc.Server, srv PunishmentAPIServer) {
	s.RegisterService(&_PunishmentAPI_serviceDesc, srv)
}

func _PunishmentAPI_CreatePunishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePunishmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishmentAPIServer).CreatePunishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PunishmentAPI/CreatePunishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishmentAPIServer).CreatePunishment(ctx, req.(*CreatePunishmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunishmentAPI_UpdatePunishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Punishment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishmentAPIServer).UpdatePunishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PunishmentAPI/UpdatePunishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishmentAPIServer).UpdatePunishment(ctx, req.(*Punishment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunishmentAPI_GetPunishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPunishmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishmentAPIServer).GetPunishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PunishmentAPI/GetPunishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishmentAPIServer).GetPunishment(ctx, req.(*GetPunishmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunishmentAPI_ListPunishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPunishmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishmentAPIServer).ListPunishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PunishmentAPI/ListPunishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishmentAPIServer).ListPunishment(ctx, req.(*ListPunishmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PunishmentAPI_CancelPunishment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPunishmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PunishmentAPIServer).CancelPunishment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.PunishmentAPI/CancelPunishment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PunishmentAPIServer).CancelPunishment(ctx, req.(*CancelPunishmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PunishmentAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.PunishmentAPI",
	HandlerType: (*PunishmentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePunishment",
			Handler:    _PunishmentAPI_CreatePunishment_Handler,
		},
		{
			MethodName: "UpdatePunishment",
			Handler:    _PunishmentAPI_UpdatePunishment_Handler,
		},
		{
			MethodName: "GetPunishment",
			Handler:    _PunishmentAPI_GetPunishment_Handler,
		},
		{
			MethodName: "ListPunishment",
			Handler:    _PunishmentAPI_ListPunishment_Handler,
		},
		{
			MethodName: "CancelPunishment",
			Handler:    _PunishmentAPI_CancelPunishment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/punishment.proto",
}

func (m *Punishment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Punishment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Punishment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintPunishment(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintPunishment(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.EndTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintPunishment(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x3a
	}
	if m.StartTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintPunishment(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Operators) > 0 {
		i -= len(m.Operators)
		copy(dAtA[i:], m.Operators)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Operators)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CancelPunishmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPunishmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelPunishmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA6 := make([]byte, len(m.Id)*10)
		var j5 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPunishment(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPunishmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPunishmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPunishmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListPunishmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPunishmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPunishmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA8 := make([]byte, len(m.UserId)*10)
		var j7 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintPunishment(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Enable) > 0 {
		dAtA10 := make([]byte, len(m.Enable)*10)
		var j9 int
		for _, num1 := range m.Enable {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintPunishment(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Type) > 0 {
		dAtA12 := make([]byte, len(m.Type)*10)
		var j11 int
		for _, num1 := range m.Type {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintPunishment(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field) > 0 {
		for iNdEx := len(m.Field) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Field[iNdEx])
			copy(dAtA[i:], m.Field[iNdEx])
			i = encodeVarintPunishment(dAtA, i, uint64(len(m.Field[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Wd) > 0 {
		i -= len(m.Wd)
		copy(dAtA[i:], m.Wd)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Wd)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePunishmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePunishmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePunishmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintPunishment(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		dAtA14 := make([]byte, len(m.Type)*10)
		var j13 int
		for _, num1 := range m.Type {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintPunishment(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserId) > 0 {
		dAtA16 := make([]byte, len(m.UserId)*10)
		var j15 int
		for _, num1 := range m.UserId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintPunishment(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.EndTime != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintPunishment(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintPunishment(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPunishmentReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPunishmentReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPunishmentReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Punishment) > 0 {
		for iNdEx := len(m.Punishment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Punishment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPunishment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintPunishment(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPunishment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPunishment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Punishment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPunishment(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovPunishment(uint64(m.UserId))
	}
	if m.Type != 0 {
		n += 1 + sovPunishment(uint64(m.Type))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Operators)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovPunishment(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	return n
}

func (m *CancelPunishmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	return n
}

func (m *GetPunishmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPunishment(uint64(m.Id))
	}
	return n
}

func (m *ListPunishmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovPunishment(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovPunishment(uint64(m.Size_))
	}
	l = len(m.Wd)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	if len(m.Field) > 0 {
		for _, s := range m.Field {
			l = len(s)
			n += 1 + l + sovPunishment(uint64(l))
		}
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	if len(m.Enable) > 0 {
		l = 0
		for _, e := range m.Enable {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	return n
}

func (m *CreatePunishmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovPunishment(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPunishment(uint64(m.Id))
	}
	if len(m.UserId) > 0 {
		l = 0
		for _, e := range m.UserId {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovPunishment(uint64(e))
		}
		n += 1 + sovPunishment(uint64(l)) + l
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovPunishment(uint64(l))
	}
	return n
}

func (m *ListPunishmentReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovPunishment(uint64(m.Total))
	}
	if len(m.Punishment) > 0 {
		for _, e := range m.Punishment {
			l = e.Size()
			n += 1 + l + sovPunishment(uint64(l))
		}
	}
	return n
}

func sovPunishment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPunishment(x uint64) (n int) {
	return sovPunishment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Punishment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Punishment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Punishment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPunishmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPunishmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPunishmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPunishmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPunishmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPunishmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPunishmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPunishmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPunishmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enable = append(m.Enable, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Enable) == 0 {
					m.Enable = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enable = append(m.Enable, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserId) == 0 {
					m.UserId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePunishmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePunishmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePunishmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserId = append(m.UserId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserId) == 0 {
					m.UserId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserId = append(m.UserId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPunishment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPunishment
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPunishment
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPunishment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPunishmentReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPunishmentReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPunishmentReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Punishment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Punishment = append(m.Punishment, &Punishment{})
			if err := m.Punishment[len(m.Punishment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPunishment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPunishment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPunishment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPunishment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPunishment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPunishment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPunishment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPunishment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPunishment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPunishment = fmt.Errorf("proto: unexpected end of group")
)
